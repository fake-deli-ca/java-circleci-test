# Java Gradle Ci rcleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
##CircleCIのバージョン指定
version: 2.1

##以下パイプラインの記述
jobs:
##"./gradlew build"コマンドによるビルド・静的検証・Junitテストを実施する
  build:
     docker:
       # specify the version you desire here
       - image: circleci/openjdk:latest

     # Specify service dependencies here if necessary
     # CircleCI maintains a library of pre-built images
     # documented at https://circleci.com/docs/2.0/circleci-images/
     # - image: circleci/postgres:9.4

     working_directory: ~/repo

     environment:
       # Customize the JVM maximum heap limit
       JVM_OPTS: -Xmx3200m
       TERM: dumb

     steps:
       - checkout

       # Download and cache dependencies
       - restore_cache:
           keys:
             - v1-dependencies-{{ checksum "build.gradle" }}
             # fallback to using the latest cache if no exact match is found
             - v1-dependencies-


       - run: chmod +x ./gradlew
       - run: ./gradlew dependencies
       - run: ./gradlew build

       - save_cache:
           paths:
             - ~/.gradle
           key: v1-dependencies-{{ checksum "build.gradle" }}


##"./gradlew sonarqube"コマンドによるSonerQubeサイトで設定した検証の実施と結果連携を行う。
  sonarqube:
    docker:
      - image: circleci/openjdk:latest

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - run:
          name: analyze by SonarQube
          command: |
            chmod +x ./gradlew
            ./gradlew clean sonarqube \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.jdbc.url=$SONAR_JDBC_URL \
              -Dsonar.jdbc.driverClassName=$SONAR_JDBC_DRIVER \
              -Dsonar.jdbc.username=$SONAR_JDBC_USERNAME \
              -Dsonar.jdbc.password=$SONAR_JDBC_PASSWORD \
              -Dsonar.projectName="${CIRCLE_BRANCH}"_"${CIRCLE_BUILD_NUM}"


##"./gradlew upload"コマンドによるビルド成果物のNexus（SNAPSHOT）登録を行う。
##staging時、最新のmasterブランチに対してタグ付けを行う。
  nexus_snapshot:
    docker:
      - image: circleci/openjdk:latest

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - run:
          name: upload to NEXUS
          command: |
            echo 'export NEXUS_URL=$NEXUS_URL_SNAPSHOT' >> $BASH_ENV
            chmod +x ./gradlew
            ./gradlew clean build publish

      - run:
          name: make staging tags
          command: |
            export VERSION=`./gradlew checkVersion | grep -E [0-9]+\.[0-9]+\.[0-9]+`
            git tag "ver_${VERSION}" origin/master
            git push origin "ver_${VERSION}"

##"./gradlew upload"コマンドによるビルド成果物のNexus（RELEASE）登録を行う。
  nexus_release:
    docker:
      - image: circleci/openjdk:latest

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: upload to NEXUS
          command: |
            echo 'export NEXUS_URL=$NEXUS_URL_RELEASE' >> $BASH_ENV
            chmod +x ./gradlew
            ./gradlew clean build publish


##連携先のECSにSCPで修正済みのjarファイルを配布する。
##連携先のECSへのSSHでjarファイル起動Shellを置き換える。
##"systemctl restart"コマンドでサービスを再起動する
##リリース元のmasterブランチに対してタグ付けを行う。
  deploy:
     docker:
       - image: circleci/golang:1.14.2-browsers

     working_directory: ~/repo

     environment:
       # Customize the JVM maximum heap limit
       JVM_OPTS: -Xmx3200m
       TERM: dumb

     steps:
       - run: |
           mkdir -p $HOME/bin
           echo 'export PATH="$HOME/bin:$PATH"' >> $BASH_ENV
       - run: |
           curl -L -o /tmp/ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
           tar -C /tmp -zxf /tmp/ghr.tar.gz
           mv /tmp/ghr_v0.13.0_linux_amd64/ghr $HOME/bin/ghr

       - checkout

       # Download and cache dependencies
       - restore_cache:
           keys:
             - v2-dependencies-{{ checksum "build.gradle" }}
             # fallback to using the latest cache if no exact match is found
             - v2-dependencies-

       - run: chmod +x ./gradlew
       - run: ./gradlew build

       # check object
       - run: ls -l build/libs/
       - store_artifacts:
           path: build/reports
       - store_test_results:
           path: build/test-results/test
       
       ##実運用では以下アプリケーション更新は、Terraformによるインフラ構築後に実施する。
       #upload app resource to ECS
#       - add_ssh_keys:
#           fingerprints:
#             - $FINGERPRINT
#             
#       - run:  
#           command: |  
#             ssh-keyscan -p 22 ${STAGING_SERVER_IP} >> ~/.ssh/known_hosts  
#
#       - run:
#           name: release app
#           command: |
#             scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=no ~/repo/build/libs/*.jar root@${STAGING_SERVER_IP}:~/RESOURCE/.
##
#       - run:
#           name: update app shell
#           command: |
#             scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=no ./shell/${APP_SHELL}.sh root@${STAGING_SERVER_IP}:~/.
#
#       - run:
#           name: change permission app shell
#           command: |
#             ssh -tt root@${STAGING_SERVER_IP} \<< EOF
#               cd ~
#               chmod +x ${APP_SHELL}.sh
#               exit
#             EOF
##
#       - run:
#           name: restart alibaba app
#           command: |
#             ssh -tt root@${STAGING_SERVER_IP} systemctl restart ${APP_SHELL}
#
       - run:
           name: make release tags
           command: |
             ghr -t $GITHUB_TOKEN -u $USERNAME -r $CIRCLE_PROJECT_REPONAME -n "v0.1" -b "Released on $(date +%Y-%m-%d)" -delete "v0.1" build/libs/
             
             


##以下Workflow※各ステップの実行順と対象ブランチを規定
workflows:
  version: 2
  workflow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^issue.+/
                - master
                - release-staging
                - release
          post-steps:
            - store_artifacts:
                path: ~/repo/build/reports/
   #   - sonarqube:
   #       requires:
   #         - build
   #       filters:
   #         branches:
   #           only:
   #             - /^issue.+/
   #             - master
      - nexus_snapshot:
          requires:
            - build
          filters:
            branches:
              only:
                - release-staging
      - nexus_release:
          requires:
            - build
          filters:
            branches:
              only:
                - release
      - deploy:
          requires:
            - build
          #  - nexus_release
          filters:
            tags:
              only: /.*/
#  nightly:
#    triggers:
#      - schedule:
#          cron: "25 * * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - build:
#          filters:
#            branches:
#              only:
#                - /^issue.+/
#                - master
#                - release
#          post-steps:
#            - store_artifacts:
#                path: ~/repo/build/reports/
#      - sonarqube:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - /^issue.+/
#                - master
#      - nexus_snapshot:
#          requires:
#            - build
#            - sonarqube
#          filters:
#            branches:
#              only:
#                - master
#      - nexus_release:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - release
#      - deploy:
#          requires:
#            - build
#            - nexus_release
#          filters:
#            branches:
#              only: release
