############################################################################################################################################
#【前提事項】
#　・JavaによるWebアプリケーションを対象とする
#　・開発フレームワークは「SpringBoot」を利用
#　・ビルドツールは「Gradle」を利用
#　・gradleのcheckstylプラグインを利用する
#　・gradleのcom.github.spotbugsプラグインを利用する
#　・gradleのorg.sonarqubeプラグインを利用する
#　・gradleのmavenプラグインを利用する
#　・mavenのuploadArchivesタスクを利用する
#　・ビルドツールは「Gradle」を利用
#　・ビルド成果物は単独のjarファイル
#　・APサーバ上では、"java -jar"コマンドでjarを実行する処理をShellに記載し、サービス登録することで
#　　Webアプリケーションが動いている
#
#
#【CircleCI設定ファイルの基本】
#　①初めに利用するCircleCIのバージョンを指定する。
#　②"jobs:"を記述して「パイプラインブロック」を作成する。
#　　※パイプライン上の各処理は「パイプラインブロック」の中に作成する。
#　③「パイプラインブロック」の中に処理単位ごとに「処理ブロック」を作成する。
#　④処理ブロックの中に"docker"として「実行環境ブロック」を指定する。
#　　※実行環境はDockerイメージを指定する
#　⑤処理ブロックの中に"steps:"として「処理実行ブロック」を記述する。
#　　※処理実行ブロックに実際に実行する処理を記述していく。
#　　※Werckerと異なり、対象コードのチェックアウトは手動（"- checkout"記述）で行う必要がある点を留意。
#　⑥"workflows:"を記述して「ワークフローブロック」を作成する。
#　⑦「ワークフローブロック」内に、"workflow:"を記述して「フローブロック」を作成する。
#　　※「フローブロック」内に、各処理の実行順序・処理対象ブランチを含む種々の依存関係を記述する。
#　⑧"workflows:"を記述して「ワークフローブロック」を作成する。
#　⑨「ワークフローブロック」内に、"nightly:"を記述して「定時実行フローブロック」を作成する。
#　　※「定時実行フローブロック」内に、cron設定を含む種々の依存関係を記述する。
#　
#　基本系
#　　##CircleCIのバージョン指定
#　　version: 2.1
#　　##以下パイプラインの記述
#　　jobs:
#　　  build:
#　　     ##実行環境
#　　     docker:
#　　       - image: Dockerイメージ
#　　     ##以下、処理「build」の実処理
#　　     steps:
#　　       ##対象コードチェックアウト
#　　       - checkout
#　　       - 処理
#　　  deploy:
#　　     docker:
#　　       - image: Dockerイメージ
#　　     steps:
#　　       - checkout
#　　       - 処理
#　　##以下ワークフローの記載
#　　workflows:
#　　  version: 2
#　　  workflow:
#　　    jobs:
#　　      - build:
#　　          filters:
#　　            branches:
#　　              only:
#　　                - 対象とするブランチ名
#　　          post-steps:
#　　            - 定常実行処理
#　　      - deploy:
#　　          requires:
#　　            - build　※先行処理
#　　##以下、定時実行ワークフローの記載
#　　  nightly:
#　　    triggers:
#　　      - schedule:
#　　          cron: "25 * * * *"
#　　          filters:
#　　            branches:
#　　              only:
#　　                - master
#　　    jobs:
#　　      - build:
#　　          filters:
#　　            branches:
#　　              only:
#　　                - /^issue\/.+/
#　　      - deploy:
#　　          requires:
#　　            - build
#
#【このymlファイル記述でやっている処理】
#①build			：GitHubから連携された対象コードに対して、"./gradlew build"コマンドでビルド・静的検証・Junitテストを行う
#②sonerqube		："./gradlew sonarqube"コマンドで対象ソースをSonerQubeに連携しSonerQubeで指定した静的検証・Junitテストを行う
#③nexus-snapshot	："./gradlew upload"コマンドでNexusのMaven2（snapshot）リポジトリにビルド資材を登録する。
#④nexus-release	："./gradlew upload"コマンドでNexusのMaven2（release）リポジトリにビルド資材を登録する。
#⑤deploy			：APサーバにビルド成果物のjarファイルをscp転送して、jar起動Shellをsystemctlコマンドで再起動する。
#
#
#【実運用における設定変更箇所】
#①環境変数※CircleCIサイトの⚙＞BUILD SETTINGS>Enviroment Variablesで設定する。
#　・SONAR_HOST_URL				：連携先SonerQubeのURL
#　・SONAR_JDBC_URL				：連携先SonerQubeの接続先JDBCのURL
#　・SONAR_JDBC_DRIVER			：連携先SonerQubeが利用するJDBCのドライバクラス名
#　・SONAR_JDBC_USERNAME		：連携先SonerQubeが利用するDBのユーザ名
#　・SONAR_JDBC_PASSWORD		：連携先SonerQubeが利用するDBのパスワード
#　・NEXUS_URL_SNAPSHOT			：連携先Nexusのリポジトリ（SNAPSHOT）のURL
#　・NEXUS_URL_RELEASE			：連携先Nexusのリポジトリ（RELEASE）のURL
#　・NEXUS_USERNAME				：連携先Nexusのユーザ名
#　・NEXUS_USERPASSWORD			：連携先Nexusのパスワード
#　・PKEY_PRIVATE				：連携先ECSの秘密鍵に対する公開鍵
#								 　※下記サイトを参考にESC上で作成する
#								 　https://webkaru.net/linux/ssh-keygen-command/
#　・STAGING_SERVER_IP			：連携先ECSのIPアドレス
#　・FINGERPRINT				：連携先ECSにSSHするためのフィンガープリント
#
#②定義ファイル内の記載の変更
#　・RESOURCE
#　　⇒ECS上のHOMEディレクトリ直下のjarファイル格納ディレクトリ名なので適宜置き換える。
#
#　・alibaba_research.sh
#　　⇒jarファイルを起動するShellファイル名なので適宜名称を変更する。
#
#　・BK_SHELL
#　　⇒ECS上のHOMEディレクトリ直下のShellファイルBK格納ディレクトリ名なので適宜置き換える。
#############################################################################################################################################

##CircleCIのバージョン指定
version: 2.1

##以下パイプラインの記述
jobs:
##"./gradlew build"コマンドによるビルド・静的検証・Junitテストを実施する
  build:
     docker:
       # specify the version you desire here
       - image: circleci/openjdk:8-jdk

     working_directory: ~/repo

     environment:
       # Customize the JVM maximum heap limit
       JVM_OPTS: -Xmx3200m
       TERM: dumb

     steps:
       - checkout

       # Download and cache dependencies
       - restore_cache:
           keys:
             - v1-dependencies-{{ checksum "build.gradle" }}
             # fallback to using the latest cache if no exact match is found
             - v1-dependencies-

       - run: gradle dependencies

       - run: chmod +x ./gradlew
       - run: ./gradlew build

       - save_cache:
           paths:
             - ~/.gradle
           key: v1-dependencies-{{ checksum "build.gradle" }}


##"./gradlew sonarqube"コマンドによるSonerQubeサイトで設定した検証の実施と結果連携を行う。
  sonarqube:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - run:
          name: analyze by SonarQube
          command: |
            chmod +x ./gradlew
            ./gradlew clean sonarqube \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.jdbc.url=$SONAR_JDBC_URL \
              -Dsonar.jdbc.driverClassName=$SONAR_JDBC_DRIVER \
              -Dsonar.jdbc.username=$SONAR_JDBC_USERNAME \
              -Dsonar.jdbc.password=$SONAR_JDBC_PASSWORD \
              -Dsonar.projectName="${CIRCLE_BRANCH}"_"${CIRCLE_BUILD_NUM}"


##"./gradlew upload"コマンドによるビルド成果物のNexus（SNAPSHOT）登録を行う。
##issueブランチmerge後のmasterブランチに対してタグ付けを行う。
##タグ名は適宜変更する。
  nexus_snapshot:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      - run:
          name: upload to NEXUS
          command: |
            echo 'export NEXUS_URL=$NEXUS_URL_SNAPSHOT' >> $BASH_ENV
            chmod +x ./gradlew
            ./gradlew clean build upload

      - run:
          name: make release tags
          command: |
            NOW=$(date +'%Y_%m%d_%H%M%S')
            git tag "issue/ver_2.1.0_${NOW}" origin/master
            git tag
            git push origin --tags


##"./gradlew upload"コマンドによるビルド成果物のNexus（RELEASE）登録を行う。
  nexus_release:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - run:
          name: upload to NEXUS
          command: |
            echo 'export NEXUS_URL=$NEXUS_URL_RELEASE' >> $BASH_ENV
            chmod +x ./gradlew
            ./gradlew clean build upload


##連携先のECSにSCPで修正済みのjarファイルを配布する。
##連携先のECSへのSSHでjarファイル起動Shellを置き換える。
##"systemctl restart"コマンドでサービスを再起動する
##最新のmasterブランチに対してタグ付けを行う。
##タグ名は適宜変更する。
  deploy:
     docker:
       - image: circleci/openjdk:8-jdk

     working_directory: ~/repo

     environment:
       # Customize the JVM maximum heap limit
       JVM_OPTS: -Xmx3200m
       TERM: dumb

     steps:
       - checkout

       # Download and cache dependencies
       - restore_cache:
           keys:
             - v1-dependencies-{{ checksum "build.gradle" }}
             # fallback to using the latest cache if no exact match is found
             - v1-dependencies-

       - run: chmod +x ./gradlew
       - run: ./gradlew build

       # check object
       - run: ls -l ~/repo/build/libs/
       
       #upload app resource to ECS
       - add_ssh_keys:
           fingerprints:
             - $FINGERPRINT
             
       - run:  
           command: |  
             ssh-keyscan -p 22 ${STAGING_SERVER_IP} >> ~/.ssh/known_hosts  

       - run:
           name: release app
           command: |
             scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=no ~/repo/build/libs/*.jar root@${STAGING_SERVER_IP}:~/RESOURCE/.

       - run:
           name: bkup app shell
           command: |
             ssh -tt root@${STAGING_SERVER_IP} "mv ~/alibaba_research.sh ~/alibaba_research.sh_BK"

       - run:
           name: make app shell
           command: |
             export JAR_FILE=`find ~/repo/build/libs/*.jar | xargs -i basename {}`
             echo $JAR_FILE
             (echo '#!/bin/bash';\
              echo "java -jar /root/RESOURCE/$JAR_FILE") >> alibaba_research.sh
             cat ./alibaba_research.sh
             scp -r -o StrictHostKeyChecking=no -o UserKnownHostsFile=no ./alibaba_research.sh root@${STAGING_SERVER_IP}:~/.

       - run:
           name: change app shell
           command: |
             ssh -tt root@${STAGING_SERVER_IP} \<< EOF
               cd ~
               mv ~/alibaba_research.sh_BK ~/BK_SHELL/alibaba_research.sh_BK_${CIRCLE_BUILD_NUM}
               chmod -x ~/BK_SHELL/alibaba_research.sh_BK_${CIRCLE_BUILD_NUM}
               chmod +x alibaba_research.sh
               exit
             EOF

       - run:
           name: restart alibaba app
           command: |
             ssh -tt root@${STAGING_SERVER_IP} systemctl restart alibaba_research

       - run:
           name: make release tags
           command: |
             NOW=$(date +'%Y_%m%d_%H%M%S')
             git tag "release/ver_2.1.0_${NOW}" origin/master
             git tag
             git push origin --tags


##以下Workflow※各ステップの実行順と対象ブランチを規定
workflows:
  version: 2
  workflow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^issue\/.+/
                - master
                - release
          post-steps:
            - store_artifacts:
                path: ~/repo/build/reports/
      - sonarqube:
          requires:
            - build
          filters:
            branches:
              only:
                - /^issue\/.+/
                - master
      - nexus_snapshot:
          requires:
            - build
            - sonarqube
          filters:
            branches:
              only:
                - master
      - nexus_release:
          requires:
            - build
          filters:
            branches:
              only:
                - release
      - deploy:
          requires:
            - build
            - nexus_release
          filters:
            branches:
              only: release
#  nightly:
#    triggers:
#      - schedule:
#          cron: "25 * * * *"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - build:
#          filters:
#            branches:
#              only:
#                - /^issue\/.+/
#                - master
#                - release
#          post-steps:
#            - store_artifacts:
#                path: ~/repo/build/reports/
#      - sonarqube:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - /^issue\/.+/
#                - master
#      - nexus_snapshot:
#          requires:
#            - build
#            - sonarqube
#          filters:
#            branches:
#              only:
#                - master
#      - nexus_release:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - release
#      - deploy:
#          requires:
#            - build
#            - nexus_release
#          filters:
#            branches:
#              only: release